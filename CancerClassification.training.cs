﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML.Transforms;
using Microsoft.ML;

namespace MachineLearning
{
    public partial class CancerClassification
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(new []{new InputOutputColumnPair(@"call", @"call"),new InputOutputColumnPair(@"call2", @"call2"),new InputOutputColumnPair(@"call3", @"call3"),new InputOutputColumnPair(@"call4", @"call4"),new InputOutputColumnPair(@"call5", @"call5"),new InputOutputColumnPair(@"call6", @"call6"),new InputOutputColumnPair(@"call7", @"call7"),new InputOutputColumnPair(@"call8", @"call8"),new InputOutputColumnPair(@"call9", @"call9"),new InputOutputColumnPair(@"call10", @"call10"),new InputOutputColumnPair(@"call11", @"call11"),new InputOutputColumnPair(@"call12", @"call12"),new InputOutputColumnPair(@"call13", @"call13"),new InputOutputColumnPair(@"call14", @"call14"),new InputOutputColumnPair(@"call15", @"call15"),new InputOutputColumnPair(@"call16", @"call16"),new InputOutputColumnPair(@"call17", @"call17"),new InputOutputColumnPair(@"call18", @"call18"),new InputOutputColumnPair(@"call19", @"call19"),new InputOutputColumnPair(@"call20", @"call20"),new InputOutputColumnPair(@"call21", @"call21"),new InputOutputColumnPair(@"call22", @"call22"),new InputOutputColumnPair(@"call23", @"call23"),new InputOutputColumnPair(@"call24", @"call24"),new InputOutputColumnPair(@"call25", @"call25"),new InputOutputColumnPair(@"call26", @"call26"),new InputOutputColumnPair(@"call27", @"call27"),new InputOutputColumnPair(@"call28", @"call28"),new InputOutputColumnPair(@"call29", @"call29"),new InputOutputColumnPair(@"call30", @"call30"),new InputOutputColumnPair(@"call31", @"call31"),new InputOutputColumnPair(@"call32", @"call32"),new InputOutputColumnPair(@"call33", @"call33"),new InputOutputColumnPair(@"call34", @"call34"),new InputOutputColumnPair(@"call35", @"call35"),new InputOutputColumnPair(@"call36", @"call36"),new InputOutputColumnPair(@"call37", @"call37"),new InputOutputColumnPair(@"call38", @"call38")}, outputKind: OneHotEncodingEstimator.OutputKind.Indicator)      
                                    .Append(mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"1", @"1"),new InputOutputColumnPair(@"2", @"2"),new InputOutputColumnPair(@"3", @"3"),new InputOutputColumnPair(@"4", @"4"),new InputOutputColumnPair(@"5", @"5"),new InputOutputColumnPair(@"6", @"6"),new InputOutputColumnPair(@"7", @"7"),new InputOutputColumnPair(@"8", @"8"),new InputOutputColumnPair(@"9", @"9"),new InputOutputColumnPair(@"10", @"10"),new InputOutputColumnPair(@"11", @"11"),new InputOutputColumnPair(@"12", @"12"),new InputOutputColumnPair(@"13", @"13"),new InputOutputColumnPair(@"14", @"14"),new InputOutputColumnPair(@"15", @"15"),new InputOutputColumnPair(@"16", @"16"),new InputOutputColumnPair(@"17", @"17"),new InputOutputColumnPair(@"18", @"18"),new InputOutputColumnPair(@"19", @"19"),new InputOutputColumnPair(@"20", @"20"),new InputOutputColumnPair(@"21", @"21"),new InputOutputColumnPair(@"22", @"22"),new InputOutputColumnPair(@"23", @"23"),new InputOutputColumnPair(@"24", @"24"),new InputOutputColumnPair(@"25", @"25"),new InputOutputColumnPair(@"26", @"26"),new InputOutputColumnPair(@"27", @"27"),new InputOutputColumnPair(@"34", @"34"),new InputOutputColumnPair(@"35", @"35"),new InputOutputColumnPair(@"36", @"36"),new InputOutputColumnPair(@"37", @"37"),new InputOutputColumnPair(@"38", @"38"),new InputOutputColumnPair(@"28", @"28"),new InputOutputColumnPair(@"29", @"29"),new InputOutputColumnPair(@"30", @"30"),new InputOutputColumnPair(@"31", @"31"),new InputOutputColumnPair(@"32", @"32"),new InputOutputColumnPair(@"33", @"33")}))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Gene Accession Number",outputColumnName:@"Gene Accession Number"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"call",@"call2",@"call3",@"call4",@"call5",@"call6",@"call7",@"call8",@"call9",@"call10",@"call11",@"call12",@"call13",@"call14",@"call15",@"call16",@"call17",@"call18",@"call19",@"call20",@"call21",@"call22",@"call23",@"call24",@"call25",@"call26",@"call27",@"call28",@"call29",@"call30",@"call31",@"call32",@"call33",@"call34",@"call35",@"call36",@"call37",@"call38",@"1",@"2",@"3",@"4",@"5",@"6",@"7",@"8",@"9",@"10",@"11",@"12",@"13",@"14",@"15",@"16",@"17",@"18",@"19",@"20",@"21",@"22",@"23",@"24",@"25",@"26",@"27",@"34",@"35",@"36",@"37",@"38",@"28",@"29",@"30",@"31",@"32",@"33",@"Gene Accession Number"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"Gene Description",inputColumnName:@"Gene Description"))      
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy(new SdcaMaximumEntropyMulticlassTrainer.Options(){L1Regularization=1F,L2Regularization=0.1F,LabelColumnName=@"Gene Description",FeatureColumnName=@"Features"}))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
}
